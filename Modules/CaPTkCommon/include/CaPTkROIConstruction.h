/**
contact: software@cbica.upenn.edu
Copyright (c) 2018 University of Pennsylvania. All rights reserved.
Use of this source code is governed by license located in license file:
https://github.com/CBICA/InciSe/blob/main/LICENSE
**/
#ifndef CaPTkROIConstruction_h
#define CaPTkROIConstruction_h

#include "mitkLabel.h"
#include "mitkLabelSetImage.h"

#include "itkImage.h"

#include "CaPTkROIConstructionImplementation.h"

#include <vector>
#include <string>
#include <memory>

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkCaPTkCommonExports.h>

namespace captk
{
/** \class ROIConstruction 
 * \brief Takes an input label mask and lattice parameters and produces masks
 * 
 * These masks are each at the intersection of input mask and lattice point.
 * The masks can be obtained one at a time, using HasNext() and GetNext().
 * Update(...) should be called prior to attempting to get the masks.
 */
class MITKCAPTKCOMMON_EXPORT ROIConstruction
{
public:
    ROIConstruction();
    ~ROIConstruction();

    void SetInputMask(mitk::LabelSetImage::Pointer input);

    /** \brief Find all the different lattice points
     * 
     * See CaPTkROIConstructionImplementation for what the parameters are
     */
    void Update(
        // JUST CALCULATE FOR ALL LABELS std::vector<mitk::Label::PixelType> rois,
        // CAN BE DEDUCED: std::vector< std::string > roi_labels,
        bool  lattice,
        float window,
        bool  fluxNeumannCondition,
        bool  patchConstructionROI,
        bool  patchConstructionNone,
        float step
    );

    /** \brief Shows if there is another lattice mask left */
    bool HasNext();

    /** \brief Get the next lattice mask */
    mitk::LabelSetImage::Pointer GetNext();

    /** \brief Resets the index to the first lattice ROI */
    void GoToBegin();

    /** \brief Get the name of the current lattice mask */
    std::string GetCurrentName();

    /** \brief Get the name of the current lattice mask */
    int GetCurrentValue();

private:
    /** \brief Convert the seeds to 2D itk::Image (because mitk::LabelSetImage is always at least 3D) */
    typename itk::Image<float,2>::Pointer
    Mitk3DLabelSetImageToItk2D(mitk::LabelSetImage::Pointer mask);

    typedef struct ROIIndices
    {
        std::vector<
            captk::ROIConstructionImplementation<itk::Image<float,2>>::ROIProperties
        > ind2D;
        std::vector<
            captk::ROIConstructionImplementation<itk::Image<float,3>>::ROIProperties
        > ind3D;
        unsigned int dimension = 3;
    } ROIIndices;

    ROIIndices* m_ROIIndices;

    /** The input label mask */
    mitk::LabelSetImage::Pointer m_Input;
    
    size_t m_CurrentIndex;
};
}

#endif // ! CaPTkROIConstruction_h